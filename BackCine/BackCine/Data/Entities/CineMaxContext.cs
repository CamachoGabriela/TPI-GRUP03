// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;

namespace BackCine.Data.Entities;

public partial class CineMaxContext : DbContext
{
    public CineMaxContext(DbContextOptions<CineMaxContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Butaca> Butacas { get; set; }

    public virtual DbSet<ButacasReservada> ButacasReservadas { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<Compra> Compras { get; set; }

    public virtual DbSet<DetalleButaca> DetalleButacas { get; set; }

    public virtual DbSet<DetallesCompra> DetallesCompras { get; set; }

    public virtual DbSet<Funcione> Funciones { get; set; }

    public virtual DbSet<Genero> Generos { get; set; }

    public virtual DbSet<Pelicula> Peliculas { get; set; }

    public virtual DbSet<Reserva> Reservas { get; set; }

    public virtual DbSet<Sala> Salas { get; set; }

    public virtual DbSet<TiposPelicula> TiposPeliculas { get; set; }

    public virtual DbSet<TiposSala> TiposSalas { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    public virtual DbSet<VisDetallesCompra> VisDetallesCompras { get; set; }

    public async Task<int> VerificarDisponibilidad(string pelicula, DateTime fecha)
    {
        var butacasDisponiblesParam = new SqlParameter
        {
            ParameterName = "@butacas_disponibles",
            SqlDbType = System.Data.SqlDbType.Int,
            Direction = System.Data.ParameterDirection.Output
        };

        // Parámetros de entrada
        var parameters = new[]
        {
        new SqlParameter("@pelicula", pelicula),
        new SqlParameter("@fecha", fecha),
        butacasDisponiblesParam  // Parámetro de salida
    };

        // Ejecutar el procedimiento almacenado
        await Database.ExecuteSqlRawAsync("EXEC pa_verificar_disponibilidad @pelicula, @fecha, @butacas_disponibles OUTPUT", parameters);

        // Obtener el valor del parámetro de salida
        int butacasDisponibles = (int)butacasDisponiblesParam.Value;

        return butacasDisponibles;
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AnalisisOcupacionResult>().HasNoKey();
        base.OnModelCreating(modelBuilder);
        modelBuilder.Entity<Butaca>(entity =>
        {
            entity.HasKey(e => new { e.IdButaca, e.IdSala }).HasName("pk_butacas_compuesta");

            entity.ToTable("BUTACAS");

            entity.Property(e => e.IdButaca).HasColumnName("ID_BUTACA");
            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.Fila).HasColumnName("FILA");
            entity.Property(e => e.NroButaca).HasColumnName("NRO_BUTACA");
        });

        modelBuilder.Entity<ButacasReservada>(entity =>
        {
            entity.HasKey(e => new { e.IdButaca, e.IdFuncion }).HasName("pk_butacas_reservadas_compuesta");

            entity.ToTable("BUTACAS_RESERVADAS");

            entity.Property(e => e.IdButaca).HasColumnName("ID_BUTACA");
            entity.Property(e => e.IdFuncion).HasColumnName("ID_FUNCION");
            entity.Property(e => e.IdReserva).HasColumnName("ID_RESERVA");
            entity.Property(e => e.IdSala).HasColumnName("id_sala");

            entity.HasOne(d => d.IdFuncionNavigation).WithMany(p => p.ButacasReservada)
                .HasForeignKey(d => d.IdFuncion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BUTACAS_RESERVADAS_FUNCIONES");

            entity.HasOne(d => d.IdReservaNavigation).WithMany(p => p.ButacasReservada)
                .HasForeignKey(d => d.IdReserva)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BUTACAS_RESERVADAS_RESERVAS");

            entity.HasOne(d => d.Butaca).WithMany(p => p.ButacasReservada)
                .HasForeignKey(d => new { d.IdButaca, d.IdSala })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_butacas_reservadas_butacas");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente);

            entity.ToTable("CLIENTES");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.Altura).HasColumnName("ALTURA");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APELLIDO");
            entity.Property(e => e.Calle)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CALLE");
            entity.Property(e => e.Estado).HasDefaultValue(true);
            entity.Property(e => e.FechaNac)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NAC");
            entity.Property(e => e.IdBarrio).HasColumnName("ID_BARRIO");
            entity.Property(e => e.IdTipoDoc).HasColumnName("ID_TIPO_DOC");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.NroDoc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NRO_DOC");
        });

        modelBuilder.Entity<Compra>(entity =>
        {
            entity.HasKey(e => e.IdCompra);

            entity.ToTable("COMPRAS");

            entity.Property(e => e.IdCompra).HasColumnName("ID_COMPRA");
            entity.Property(e => e.Descuento).HasColumnName("DESCUENTO");
            entity.Property(e => e.FechaCompra)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COMPRA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEmpleado).HasColumnName("ID_EMPLEADO");
            entity.Property(e => e.IdFormaPago).HasColumnName("ID_FORMA_PAGO");
            entity.Property(e => e.IdTipoCompra).HasColumnName("ID_TIPO_COMPRA");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Compras)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRAS_CLIENTES");
        });

        modelBuilder.Entity<DetalleButaca>(entity =>
        {
            entity.HasKey(e => new { e.IdButaca, e.IdFuncion }).HasName("pk_det_butacas_compuesta");

            entity.ToTable("DETALLE_BUTACAS");

            entity.Property(e => e.IdButaca).HasColumnName("ID_BUTACA");
            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");
            entity.Property(e => e.IdSala).HasColumnName("id_sala");

            entity.HasOne(d => d.IdFuncionNavigation).WithMany(p => p.DetalleButacas)
                .HasForeignKey(d => d.IdFuncion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_det_butacas_funcion");

            entity.HasOne(d => d.Butaca).WithMany(p => p.DetalleButacas)
                .HasForeignKey(d => new { d.IdButaca, d.IdSala })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_det_butacas_butaca");
        });

        modelBuilder.Entity<DetallesCompra>(entity =>
        {
            entity.HasKey(e => e.IdDetalleCompra);

            entity.ToTable("DETALLES_COMPRA");

            entity.Property(e => e.IdDetalleCompra).HasColumnName("ID_DETALLE_COMPRA");
            entity.Property(e => e.IdButaca).HasColumnName("id_butaca");
            entity.Property(e => e.IdCompra).HasColumnName("ID_COMPRA");
            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");
            entity.Property(e => e.PrecioEntrada)
                .HasColumnType("money")
                .HasColumnName("PRECIO_ENTRADA");

            entity.HasOne(d => d.IdCompraNavigation).WithMany(p => p.DetallesCompras)
                .HasForeignKey(d => d.IdCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_det_compras_compra");

            entity.HasOne(d => d.DetalleButaca).WithMany(p => p.DetallesCompras)
                .HasForeignKey(d => new { d.IdButaca, d.IdFuncion })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_det_compra_det_butacas");
        });

        modelBuilder.Entity<Funcione>(entity =>
        {
            entity.HasKey(e => e.IdFuncion);

            entity.ToTable("FUNCIONES");

            entity.Property(e => e.IdFuncion).HasColumnName("ID_FUNCION");
            entity.Property(e => e.FechaFuncion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FUNCION");
            entity.Property(e => e.HsInicio).HasColumnName("HS_INICIO");
            entity.Property(e => e.IdPelicula).HasColumnName("ID_PELICULA");
            entity.Property(e => e.IdPromocion).HasColumnName("ID_PROMOCION");
            entity.Property(e => e.IdSala).HasColumnName("ID_SALA");
            entity.Property(e => e.PrecioBase)
                .HasColumnType("money")
                .HasColumnName("PRECIO_BASE");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdPelicula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONES_PELICULAS");

            entity.HasOne(d => d.IdSalaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONES_SALAS");
        });

        modelBuilder.Entity<Genero>(entity =>
        {
            entity.HasKey(e => e.IdGenero);

            entity.ToTable("GENEROS");

            entity.Property(e => e.IdGenero).HasColumnName("ID_GENERO");
            entity.Property(e => e.Genero1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GENERO");

            entity.HasMany(d => d.IdPeliculas).WithMany(p => p.IdGeneros)
                .UsingEntity<Dictionary<string, object>>(
                    "PeliculasGenero",
                    r => r.HasOne<Pelicula>().WithMany()
                        .HasForeignKey("IdPelicula")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PELICULAS_GENEROS_PELICULAS"),
                    l => l.HasOne<Genero>().WithMany()
                        .HasForeignKey("IdGenero")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PELICULAS_GENEROS_GENEROS"),
                    j =>
                    {
                        j.HasKey("IdGenero", "IdPelicula");
                        j.ToTable("PELICULAS_GENEROS");
                        j.IndexerProperty<int>("IdGenero").HasColumnName("ID_GENERO");
                        j.IndexerProperty<int>("IdPelicula").HasColumnName("ID_PELICULA");
                    });
        });

        modelBuilder.Entity<Pelicula>(entity =>
        {
            entity.HasKey(e => e.IdPelicula);

            entity.ToTable("PELICULAS");

            entity.Property(e => e.IdPelicula).HasColumnName("ID_PELICULA");
            entity.Property(e => e.ApellidoActor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APELLIDO_ACTOR");
            entity.Property(e => e.ApellidoDirector)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APELLIDO_DIRECTOR");
            entity.Property(e => e.Duracion).HasColumnName("DURACION");
            entity.Property(e => e.EstaActivo).HasColumnName("ESTA_ACTIVO");
            entity.Property(e => e.IdCalificacion).HasColumnName("ID_CALIFICACION");
            entity.Property(e => e.IdDistribuidor).HasColumnName("ID_DISTRIBUIDOR");
            entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");
            entity.Property(e => e.IdTipoPelicula).HasColumnName("ID_TIPO_PELICULA");
            entity.Property(e => e.NombreActor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ACTOR");
            entity.Property(e => e.NombreDirector)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_DIRECTOR");
            entity.Property(e => e.Titulo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TITULO");

            entity.HasOne(d => d.IdTipoPeliculaNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdTipoPelicula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PELICULAS_TIPOS_PELICULA");
        });

        modelBuilder.Entity<Reserva>(entity =>
        {
            entity.HasKey(e => e.IdReserva);

            entity.ToTable("RESERVAS");

            entity.Property(e => e.IdReserva).HasColumnName("ID_RESERVA");
            entity.Property(e => e.CantidadEntradas).HasColumnName("CANTIDAD_ENTRADAS");
            entity.Property(e => e.FechaReserva)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESERVA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdCompra).HasColumnName("ID_COMPRA");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdFuncion).HasColumnName("ID_FUNCION");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RESERVAS_CLIENTES");

            entity.HasOne(d => d.IdCompraNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.IdCompra)
                .HasConstraintName("FK_RESERVAS_COMPRAS");

            entity.HasOne(d => d.IdFuncionNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.IdFuncion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RESERVAS_FUNCIONES");
        });

        modelBuilder.Entity<Sala>(entity =>
        {
            entity.HasKey(e => e.IdSala);

            entity.ToTable("SALAS");

            entity.Property(e => e.IdSala)
                .ValueGeneratedNever()
                .HasColumnName("ID_SALA");
            entity.Property(e => e.Capacidad).HasColumnName("CAPACIDAD");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.IdTipoSala).HasColumnName("ID_TIPO_SALA");

            entity.HasOne(d => d.IdTipoSalaNavigation).WithMany(p => p.Salas)
                .HasForeignKey(d => d.IdTipoSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SALAS_TIPOS_SALA");
        });

        modelBuilder.Entity<TiposPelicula>(entity =>
        {
            entity.HasKey(e => e.IdTipoPelicula);

            entity.ToTable("TIPOS_PELICULA");

            entity.Property(e => e.IdTipoPelicula).HasColumnName("ID_TIPO_PELICULA");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
        });

        modelBuilder.Entity<TiposSala>(entity =>
        {
            entity.HasKey(e => e.IdTipoSala);

            entity.ToTable("TIPOS_SALA");

            entity.Property(e => e.IdTipoSala).HasColumnName("ID_TIPO_SALA");
            entity.Property(e => e.TipoSala)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_SALA");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario).HasName("PK__Usuarios__5B65BF97F41B8926");

            entity.HasIndex(e => e.Email, "UQ__Usuarios__A9D10534337A9955").IsUnique();

            entity.Property(e => e.Contrasenha)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Estado).HasDefaultValue(true);
            entity.Property(e => e.IdCliente).HasColumnName("Id_cliente");
            entity.Property(e => e.Rol)
                .HasMaxLength(20)
                .HasDefaultValue("User");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Usuarios__Id_cli__3F115E1A");
        });

        modelBuilder.Entity<VisDetallesCompra>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vis_DetallesCompras");

            entity.Property(e => e.FechaCompra).HasColumnType("datetime");
            entity.Property(e => e.NombreCliente)
                .IsRequired()
                .HasMaxLength(101)
                .IsUnicode(false);
            entity.Property(e => e.PrecioTotal).HasColumnType("money");
            entity.Property(e => e.Sala)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}