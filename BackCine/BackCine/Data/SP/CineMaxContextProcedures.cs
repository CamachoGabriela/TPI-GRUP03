// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using BackCine.Data.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace BackCine.Data.Entities
{
    public partial class CineMaxContext
    {
        private ICineMaxContextProcedures _procedures;

        public virtual ICineMaxContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new CineMaxContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ICineMaxContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class CineMaxContextProcedures : ICineMaxContextProcedures
    {
        private readonly CineMaxContext _context;

        public CineMaxContextProcedures(CineMaxContext context)
        {
            _context = context;
        }

        public virtual async Task<List<pa_analisis_ocupacionResult>> pa_analisis_ocupacionAsync(DateTime? fecha1, DateTime? fecha2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "fecha1",
                    Value = fecha1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "fecha2",
                    Value = fecha2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<pa_analisis_ocupacionResult>("EXEC @returnValue = [dbo].[pa_analisis_ocupacion] @fecha1 = @fecha1, @fecha2 = @fecha2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PA_CONSULTA_CLIENTEResult>> PA_CONSULTA_CLIENTEAsync(string nombre, string apellido, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nombre",
                    Size = 50,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "apellido",
                    Size = 50,
                    Value = apellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PA_CONSULTA_CLIENTEResult>("EXEC @returnValue = [dbo].[PA_CONSULTA_CLIENTE] @nombre = @nombre, @apellido = @apellido", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> pa_verificar_disponibilidad(string pelicula, DateTime? fecha, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pelicula",
                    Size = 50,
                    Value = pelicula ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fecha",
                    Value = fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[pa_verificar_disponibilidad] @pelicula = @pelicula, @fecha = @fecha", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
